
Arduino_AVR_Ep_08.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d3  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  000008bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024a  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005e  00000000  00000000  0000154a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_11>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_12>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6d 00 	call	0xda	; 0xda <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_11>:
//{
//   LedToggle;
//}

ISR(TIMER1_COMPA_vect)       /* Set the vector to compare mode */
{
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
	LedOn;
  8a:	28 9a       	sbi	0x05, 0	; 5
}
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

00000096 <__vector_12>:

ISR(TIMER1_COMPB_vect)       /* Set the vector to compare mode */
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
	LedOff;
  a0:	28 98       	cbi	0x05, 0	; 5
}
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <PWM_Init>:
	                         /* No prescale, CTC Mode;
							   Generate 2 OCR channels
					         */
void PWM_Init(void)
	 {
		 TCCR1B |=   (1 << CS10) | (1 << WGM12);
  ac:	e1 e8       	ldi	r30, 0x81	; 129
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	89 60       	ori	r24, 0x09	; 9
  b4:	80 83       	st	Z, r24
		 TIMSK1 |= (1 << OCIE1A) | (1 << OCIE1B);
  b6:	ef e6       	ldi	r30, 0x6F	; 111
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	80 83       	st	Z, r24
		                     // Duty cycle proportions
		 OCR1A = 800;
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  c8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		 OCR1B = 100;
  cc:	84 e6       	ldi	r24, 0x64	; 100
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
  d4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  d8:	08 95       	ret

000000da <main>:

int main(void)
{  
	/**************************         I/O Routines         **************************/
	                         /* PORTB Data Register - DS pg 92 */
    DDRB |=  (1<<DDB0);      /* LED Attach -> Pin 0 of PORTB (Arduino Digital 8) */
  da:	20 9a       	sbi	0x04, 0	; 4
	DDRD &= ~(1<<DDD7);      /* Switch Key -> Pin 7 of PORTD (Arduino Digital 7) */
  dc:	57 98       	cbi	0x0a, 7	; 10
	
	//Timer_Frequency(10);   /**Commented on Episode #8!**/
	
	PWM_Init();              
  de:	0e 94 56 00 	call	0xac	; 0xac <PWM_Init>
	/************************* Pin Change Interrupt Routines **************************/ 
	//PCMSK2 |= (1<<PCINT23);  /* Pin Change Mask Register 2 on Arduino Pin 7 I/O - pg 94 */
	//PCICR |= (1<< PCIE2);  /* bit selects whether pin change interrupt is enabled */
	/**Commented on Episode #7!**/
	
	sei();                   /* Enable interrupt by setting the global interrupt mask */
  e2:	78 94       	sei
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <main+0xa>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
